# Path variables
finalBuildPath = "lib/"
componentFile  = "bower.json"

child = require "child_process"

GIT_TAG   = "git describe --tags --abbrev=0"
CHANGELOG = "coffee ./changelog.coffee"

getLastVersion = (callback) ->
  child.exec GIT_TAG, (error, stdout, stderr) ->
    data = if error? then "" else stdout.replace("\n", "")
    callback error, data

module.exports = (grunt) ->
  ###
  @name replace
  @description
  Replace placeholder with other values and content
  ###
  grunt.registerMultiTask "replace", "Replace placeholder with contents", ->
    options = @options
      separator: ""
      replace:   ""
      pattern:   null

    parse = (code) ->
      templateUrlRegex = options.pattern
      updatedCode      = code

      while match = templateUrlRegex.exec code
        if grunt.util._(options.replace).isFunction()
          replacement = options.replace match
        else
          replacement = options.replace

        updatedCode = updatedCode.replace match[0], replacement

      return updatedCode

    @files.forEach (file) ->
      src = file.src.filter (filepath) ->
        unless (exists = grunt.file.exists(filepath))
          grunt.log.warn "Source file '#{filepath}' not found"
        return exists
      .map (filepath) ->
        parse grunt.file.read(filepath)
      .join grunt.util.normalizelf(options.separator)

      grunt.file.write file.dest, src
      grunt.log.writeln("Replace placeholder with contents in '#{file.dest}' successfully")

  ###
  @name Marked task
  @description
  To convert markdown generated by Chalkboard to html
  ###
  grunt.registerMultiTask "marked", "Convert markdown to html", ->
    options = @options
      separator: grunt.util.linefeed

    @files.forEach (file) ->
      src = file.src.filter (filepath) ->
        unless (exists = grunt.file.exists(filepath))
          grunt.log.warn "Source file '#{filepath}' not found"
        return exists
      .map (filepath) ->
        marked = require "marked"
        marked grunt.file.read(filepath)
      .join grunt.util.normalizelf(options.separator)

      grunt.file.write file.dest, src
      grunt.log.writeln("Converted '#{file.dest}'")

  ###
  @name changelog
  @description
  Generate changelog with changelog.coffee
  ###
  grunt.registerTask "changelog", "Generate temporary changelog", ->
    done    = @async()
    version = grunt.config.get("pkg").version

    CMD = "#{CHANGELOG} v#{version} changelog.tmp.md"
    child.exec CMD, (error, stdout, stderr) ->
      grunt.fail.fatal error if error?

      grunt.log.writeln stdout
      done()
